<?php

namespace app\controllers;

use app\controllers\base\CatiController;
use app\models\AcreditacionTitulaciones;
use app\models\AsignaturaCalificacion;
use app\models\AsignaturaIndicador;
use app\models\Calendario;
use app\models\Doctorado;
use app\models\DoctoradoMacroarea;
use app\models\Estudio;
use app\models\EstudioPrevioMaster;
use app\models\InformePregunta;
use app\models\InformePublicado;
use app\models\InformeRespuesta;
use app\models\NuevoIngreso;
use app\models\Plan;
use app\models\Profesorado;
use yii\db\Expression;
use yii\helpers\Url;
use yii\web\NotFoundHttpException;
use yii\web\ServerErrorHttpException;
use Yii;
// use mikehaertl\pdftk\Pdf as Pdftk;
use mikehaertl\wkhtmlto\Pdf;

/**
 * This is the class for controller "InformeController".
 */
class InformeController extends CatiController
{
    /**
     * {@inheritdoc}
     */
    public function behaviors()
    {
        $request = Yii::$app->request;
        if ($request->isPost) {
            $estudio_id = $request->post('estudio_id');
        } else {
            // GET, HEAD, PUT, DELETE, CONNECT, OPTIONS, TRACE, PATCH.
            $estudio_id = $request->get('estudio_id');
        }

        return \yii\helpers\ArrayHelper::merge(
            parent::behaviors(),
            [
            'access' => [
                'rules' => [
                    [
                        'actions' => [
                            'cerrar', 'previsualizar', 'cerrar-doct', 'cerrar-iced',
                            'editar', 'editar-doct', 'editar-iced', 'guardar',
                        ],
                        'allow' => true,
                        // Seguir bug #13598: https://github.com/yiisoft/yii2/issues/13598
                        'matchCallback' => function ($rule, $action) use ($estudio_id) {
                            return Yii::$app->user->can('editarInforme', ['estudio' => Estudio::getEstudio($estudio_id)]);
                        },
                        'roles' => ['@'],
                    ], [
                        'actions' => ['cargar-a-zaguan'],
                        'allow' => true,
                        'roles' => ['unidadCalidad'],
                    ], [
                        'actions' => [
                            'calificaciones', 'estructura-profesorado', 'evolucion-profesorado', 'indicadores',
                            'estudio-previo', 'nota-media', 'planes-movilidad',
                            'plazas-nuevo-ingreso', 'resultados-academicos', 'globales', 'globales-abandono',
                            'globales-adaptacion', 'globales-creditos', 'globales-duracion',
                            'globales-exito', 'globales-nuevo-ingreso', 'ver', 'ver-doct', 'ver-iced',
                            'marc-xml'
                        ],
                        'allow' => true,
                    ],
                ],
            ],
            ]
        );
    }

    /**
     * Distribución de calificaciones
     */
    public function actionCalificaciones($estudio_id, $anyo)
    {
        $estudio = Estudio::getEstudio($estudio_id);
        $dpsCalificaciones = AsignaturaCalificacion::getDpsCalificaciones(intval($anyo), $estudio);

        return $this->render(
            'calificaciones',
            [
                'anyo' => intval($anyo),
                'dpsCalificaciones' => $dpsCalificaciones,
                'estudio' => $estudio,
            ]
        );
    }

    /**
     * Muestra las tablas de estructura del profesorado de un estudio y año.
     */
    public function actionEstructuraProfesorado($anyo, $estudio_id_nk)
    {
        $nombre_estudio = Estudio::getNombreByNk($estudio_id_nk);
        $estructuras = Profesorado::getEstructuraProfesorado($anyo, $estudio_id_nk);

        if (empty(array_filter($estructuras))) {
            throw new NotFoundHttpException(
                Yii::t(
                    'cati',
                    'No se han encontrado las estructuras del profesorado para ese estudio y año.  ☹'
                )
            );
        }

        return $this->render(
            'estructura-profesorado',
            [
                'anyo' => intval($anyo),
                'estructuras' => $estructuras,
                'estudio_id_nk' => $estudio_id_nk,
                'nombre_estudio' => $nombre_estudio,
            ]
        );
    }

    /**
     * Muestra la evolución del profesorado de un estudio
     */
    public function actionEvolucionProfesorado($estudio_id_nk)
    {
        $nombre_estudio = Estudio::getNombreByNk($estudio_id_nk);
        $evoluciones = Profesorado::getEvolucionProfesorado($estudio_id_nk);

        return $this->render(
            'evolucion-profesorado',
            [
                'estudio_id_nk' => $estudio_id_nk,
                'evoluciones' => $evoluciones,
                'nombre_estudio' => $nombre_estudio,
            ]
        );
    }


    /**
     * Análisis de los indicadores del título
     */
    public function actionIndicadores($estudio_id, $anyo)
    {
        $estudio = Estudio::getEstudio($estudio_id);

        $indicadores = AsignaturaIndicador::find()
            ->where(['COD_ESTUDIO' => $estudio->id_nk])->andWhere(['ANO_ACADEMICO' => $anyo])->all();

        if (!$indicadores) {
            throw new NotFoundHttpException(
                Yii::t(
                    'cati',
                    'No se han encontrado indicadores para ese estudio y año.  ☹'
                )
            );
        }

        $centros = $estudio->getCentros();

        return $this->render(
            'indicadores',
            [
                'centros' => $centros,
                'estudio' => $estudio,
                'indicadores' => $indicadores,
            ]
        );
    }

    /**
     * Muestra los estudios previos de los alumnos de un grado o máster.
     */
    public function actionEstudioPrevio($anyo, $estudio_id)
    {
        $estudio = Estudio::getEstudio($estudio_id);

        if ($estudio->esGrado()) {
            $dpEstudiosPrevios = NuevoIngreso::getDpNuevosIngresos($anyo, $estudio->id_nk);
        } else { // Máster
            $dpEstudiosPrevios = EstudioPrevioMaster::getDpEstudiosPrevios($anyo, $estudio->id_nk);
        }

        return $this->render(
            'estudio_previo',
            [
                'anyo' => intval($anyo),
                'dpEstudiosPrevios' => $dpEstudiosPrevios,
                'estudio' => $estudio,
            ]
        );
    }

    public function actionNotaMedia($anyo, $estudio_id)
    {
        $estudio = Estudio::getEstudio($estudio_id);

        return $this->render(
            'nota_media',
            [
                'estudio' => $estudio,
                'dpNuevosIngresos' => NuevoIngreso::getDpNuevosIngresos($anyo, $estudio->id_nk),
            ]
        );
    }

    public function actionPlanesMovilidad($anyo, $estudio_id)
    {
        $estudio = Estudio::getEstudio($estudio_id);

        return $this->render(
            'planes_movilidad',
            [
                'estudio' => $estudio,
                'dpMovilidades' => AcreditacionTitulaciones::getDpMovilidades($anyo, $estudio->id_nk),
            ]
        );
    }

    public function actionPlazasNuevoIngreso($estudio_id, $anyo)
    {
        $estudio = Estudio::getEstudio($estudio_id);

        $nuevos_ingresos = NuevoIngreso::find()
            ->where(['COD_ESTUDIO' => $estudio->id_nk])->andWhere(['ANO_ACADEMICO' => $anyo])->all();

        if (!$nuevos_ingresos) {
            throw new NotFoundHttpException(
                Yii::t(
                    'cati',
                    'No se han encontrado las plazas de nuevo ingreso ofertadas para ese estudio y año.  ☹'
                )
            );
        }

        return $this->render(
            'plazas_nuevo_ingreso',
            [
                'estudio' => Estudio::getEstudio($estudio_id),
                'nuevos_ingresos' => $nuevos_ingresos,
            ]
        );
    }

    /* Resultados académicos de años anteriores */
    public function actionResultadosAcademicos($estudio_id)
    {
        $anyo_academico = Calendario::getAnyoAcademico();
        $estudio = Estudio::getEstudio($estudio_id);
        $anyos = AsignaturaIndicador::anyosAnteriores($estudio->id_nk, $anyo_academico);

        return $this->render(
            'resultados_academicos',
            [
                'estudio' => $estudio,
                'anyos' => $anyos,
            ]
        );
    }

    public function actionGlobales($estudio_id)
    {
        // Al final de enero se publican los resultados del curso actual que ya se conocen
        // (oferta/nuevo ingreso/matrícula, créditos reconocidos...)
        // Algunos resultados (éxito/rendimiento/eficiencia, abandono/graduación...)
        // no se conocerán de forma definitiva hastá después de los exámenes de septiembre.
        $anyo_resultados = date('m') < 10 ? date('Y') - 2 : date('Y') - 1;

        $estudio = Estudio::getEstudio($estudio_id);

        $globales = AcreditacionTitulaciones::find()
            ->where(['COD_ESTUDIO' => $estudio->id_nk])
            ->orderBy('ANO_ACADEMICO')
            ->asArray()->all();

        if (!$globales) {
            throw new NotFoundHttpException(
                Yii::t(
                    'cati',
                    'No se han encontrado datos globales para ese estudio.  ☹'
                )
            );
        }

        $globales_abandono = AcreditacionTitulaciones::find()
            ->where(['COD_ESTUDIO' => $estudio->id_nk])
            ->andWhere(['<=', 'ANO_ACADEMICO', $anyo_resultados])
            ->andWhere('TASA_ABANDONO != 0 OR TASA_GRADUACION != 0')
            ->orderBy('ANO_ACADEMICO')
            ->asArray()->all();

        $globales_definitivos = AcreditacionTitulaciones::find()
            ->where(['COD_ESTUDIO' => $estudio->id_nk])
            ->andWhere(['<=', 'ANO_ACADEMICO', $anyo_resultados])
            ->orderBy('ANO_ACADEMICO')
            ->asArray()->all();

        $centros = $estudio->getCentros();

        return $this->render(
            'globales',
            [
                'estudio' => $estudio,
                'globales' => $globales,
                'globales_abandono' => $globales_abandono,
                'globales_definitivos' => $globales_definitivos,
                'centros' => $centros,
            ]
        );
    }

    public function actionGlobalesAbandono($estudio_id)
    {
        $estudio = Estudio::getEstudio($estudio_id);
        // Al final de enero se publican los resultados del curso actual que ya se conocen
        // (oferta/nuevo ingreso/matrícula, créditos reconocidos...)
        // Algunos resultados (éxito/rendimiento/eficiencia, abandono/graduación...)
        // no se conocerán hastá después de los exámenes de septiembre.
        $anyo_resultados = date('m') < 10 ? date('Y') - 2 : date('Y') - 1;
        $globales_abandono = AcreditacionTitulaciones::find()
            ->where(['COD_ESTUDIO' => $estudio->id_nk])
            ->andWhere(['<=', 'ANO_ACADEMICO', $anyo_resultados])
            ->andWhere('TASA_ABANDONO != 0 OR TASA_GRADUACION != 0')
            ->orderBy('ANO_ACADEMICO')
            ->asArray()->all();

        if (!$globales_abandono) {
            throw new NotFoundHttpException(
                Yii::t(
                    'cati',
                    'No se han encontrado datos globales para ese estudio.  ☹'
                )
            );
        }

        $centros = $estudio->getCentros();

        return $this->render(
            'globales_abandono',
            [
                'estudio' => $estudio,
                'globales_abandono' => $globales_abandono,
                'centros' => $centros,
            ]
        );
    }

    public function actionGlobalesAdaptacion($estudio_id)
    {
        $estudio = Estudio::getEstudio($estudio_id);
        // Al final de enero se publican los resultados del curso actual que ya se conocen
        // (oferta/nuevo ingreso/matrícula, créditos reconocidos...)
        // Algunos resultados (éxito/rendimiento/eficiencia, abandono/graduación...)
        // no se conocerán hastá después de los exámenes de septiembre.
        $anyo_resultados = date('m') < 10 ? date('Y') - 2 : date('Y') - 1;
        $globales = AcreditacionTitulaciones::find()
            ->where(['COD_ESTUDIO' => $estudio->id_nk])
            ->andWhere(['<=', 'ANO_ACADEMICO', $anyo_resultados])
            ->orderBy('ANO_ACADEMICO')
            ->asArray()->all();

        if (!$globales) {
            throw new NotFoundHttpException(
                Yii::t(
                    'cati',
                    'No se han encontrado datos globales para ese estudio.  ☹'
                )
            );
        }

        $centros = $estudio->getCentros();

        return $this->render(
            'globales_adaptacion',
            [
                'estudio' => $estudio,
                'globales' => $globales,
                'centros' => $centros,
            ]
        );
    }

    public function actionGlobalesCreditos($estudio_id)
    {
        $estudio = Estudio::getEstudio($estudio_id);

        $globales = AcreditacionTitulaciones::find()
            ->where(['COD_ESTUDIO' => $estudio->id_nk])->orderBy('ANO_ACADEMICO')->asArray()->all();

        if (!$globales) {
            throw new NotFoundHttpException(
                Yii::t(
                    'cati',
                    'No se han encontrado datos globales para ese estudio.  ☹'
                )
            );
        }

        $centros = $estudio->getCentros();

        return $this->render(
            'globales_creditos',
            [
                'estudio' => $estudio,
                'globales' => $globales,
                'centros' => $centros,
            ]
        );
    }

    public function actionGlobalesDuracion($estudio_id)
    {
        $estudio = Estudio::getEstudio($estudio_id);
        // Al final de enero se publican los resultados del curso actual que ya se conocen
        // (oferta/nuevo ingreso/matrícula, créditos reconocidos...)
        // Algunos resultados (éxito/rendimiento/eficiencia, abandono/graduación...)
        // no se conocerán hastá después de los exámenes de septiembre.
        $anyo_resultados = date('m') < 10 ? date('Y') - 2 : date('Y') - 1;
        $globales = AcreditacionTitulaciones::find()
            ->where(['COD_ESTUDIO' => $estudio->id_nk])
            ->andWhere(['<=', 'ANO_ACADEMICO', $anyo_resultados])
            ->orderBy('ANO_ACADEMICO')
            ->asArray()->all();

        if (!$globales) {
            throw new NotFoundHttpException(
                Yii::t(
                    'cati',
                    'No se han encontrado datos globales para ese estudio.  ☹'
                )
            );
        }

        $centros = $estudio->getCentros();

        return $this->render(
            'globales_duracion',
            [
                'estudio' => $estudio,
                'globales' => $globales,
                'centros' => $centros,
            ]
        );
    }

    public function actionGlobalesExito($estudio_id)
    {
        $estudio = Estudio::getEstudio($estudio_id);
        // Al final de enero se publican los resultados del curso actual que ya se conocen
        // (oferta/nuevo ingreso/matrícula, créditos reconocidos...)
        // Algunos resultados (éxito/rendimiento/eficiencia, abandono/graduación...)
        // no se conocerán hastá después de los exámenes de septiembre.
        $anyo_resultados = date('m') < 10 ? date('Y') - 2 : date('Y') - 1;
        $globales = AcreditacionTitulaciones::find()
            ->where(['COD_ESTUDIO' => $estudio->id_nk])
            ->andWhere(['<=', 'ANO_ACADEMICO', $anyo_resultados])
            ->orderBy('ANO_ACADEMICO')
            ->asArray()->all();

        if (!$globales) {
            throw new NotFoundHttpException(
                Yii::t(
                    'cati',
                    'No se han encontrado datos globales para ese estudio.  ☹'
                )
            );
        }

        $centros = $estudio->getCentros();

        return $this->render(
            'globales_exito',
            [
                'estudio' => $estudio,
                'globales' => $globales,
                'centros' => $centros,
            ]
        );
    }

    public function actionGlobalesNuevoIngreso($estudio_id)
    {
        $estudio = Estudio::getEstudio($estudio_id);

        $globales = AcreditacionTitulaciones::find()
            ->where(['COD_ESTUDIO' => $estudio->id_nk])->orderBy('ANO_ACADEMICO')->asArray()->all();

        if (!$globales) {
            throw new NotFoundHttpException(
                Yii::t(
                    'cati',
                    'No se han encontrado datos globales para ese estudio.  ☹'
                )
            );
        }

        $centros = $estudio->getCentros();

        return $this->render(
            'globales_nuevo_ingreso',
            [
                'estudio' => $estudio,
                'globales' => $globales,
                'centros' => $centros,
            ]
        );
    }

    /**
     * Muestra el informe de evaluación de un estudio (de Grado o Máster) y año.
     */
    public function actionVer($estudio_id, $anyo)
    {
        $estudio = Estudio::getEstudio($estudio_id);
        $language = Yii::$app->language;
        $informePublicado = InformePublicado::find()
            ->where(['estudio_id' => $estudio_id, 'anyo' => $anyo, 'language' => $language])->one();

        $nueva_version = isset($informePublicado) ? $informePublicado->version + 1 : 1;

        // El campo apartado es una cadena, por lo que se ordena alfabéticamente
        // y 10 va después de 1 en lugar de después de 9.
        // Con esta expresión convertimos a tipo numérico los primeros 3 caracteres
        // y ordenamos correctamente.  En MS SQLServer usar SUBSTRING().
        $exp = new Expression('CAST(SUBSTR(apartado, 1, 3) AS DECIMAL), apartado');

        $preguntas = InformePregunta::find()
            ->where(['anyo' => $anyo, 'tipo' => $estudio->getTipoEstudio()])
            ->orderBy($exp)
            ->all();
        if (!$preguntas) {
            throw new NotFoundHttpException(
                Yii::t(
                    'cati',
                    'No se han encontrado las preguntas del informe de evaluación para ese año.  ☹'
                )
            );
        }

        $respuestas = InformeRespuesta::find()
            ->where(['estudio_id' => $estudio_id])->andWhere(['anyo' => $anyo])
            ->orderBy($exp)
            ->all();

        $respuestas2 = [];
        foreach ($respuestas as $respuesta) {
            $respuestas2[$respuesta->informe_pregunta_id] = $respuesta;
        }

        $version_maxima = InformePublicado::MAX_VERSION_INFORME;
        $mostrar_botones = (
            ($nueva_version <= $version_maxima) and Yii::$app->user->can('editarInforme', ['estudio' => $estudio])
        );

        $nuevos_ingresos = NuevoIngreso::find()
            ->where(['COD_ESTUDIO' => $estudio->id_nk])->andWhere(['ANO_ACADEMICO' => $anyo])->all();

        $dpsCalificaciones = AsignaturaCalificacion::getDpsCalificaciones(intval($anyo), $estudio);

        $planes = $estudio->getPlans()->where(['activo' => 1])->all();
        $lista_planes = array_column($planes, 'id_nk');

        $estructuras = Profesorado::getEstructuraProfesorado($anyo, $estudio->id_nk);

        $globales = AcreditacionTitulaciones::find()
            ->where(['COD_ESTUDIO' => $estudio->id_nk])
            ->andWhere(['between', 'ANO_ACADEMICO', $anyo - 6, $anyo])
            ->orderBy('ANO_ACADEMICO')->asArray()->all();

        $globales_abandono = AcreditacionTitulaciones::find()
            ->where(['COD_ESTUDIO' => $estudio->id_nk])
            ->andWhere(['between', 'ANO_ACADEMICO', $anyo - 6, $anyo])
            ->andWhere('TASA_ABANDONO != 0 OR TASA_GRADUACION != 0')
            ->orderBy('ANO_ACADEMICO')
            ->asArray()->all();

        $indicadores = AsignaturaIndicador::find()
            ->where(['COD_ESTUDIO' => $estudio->id_nk])->andWhere(['ANO_ACADEMICO' => $anyo])->all();

        return $this->render(
            'ver',
            [
            'anyo' => intval($anyo),
            'estudio' => $estudio,
            'centros' => $estudio->getCentros(),
            'dpsCalificaciones' => $dpsCalificaciones,
            'dpEstudiosPrevios' => $estudio->esGrado() ? NuevoIngreso::getDpNuevosIngresos($anyo, $estudio->id_nk)
                                                       : EstudioPrevioMaster::getDpEstudiosPrevios($anyo, $estudio->id_nk),
            'dpMovilidades' => AcreditacionTitulaciones::getDpMovilidades($anyo, $estudio->id_nk),
            'dpNuevosIngresos' => NuevoIngreso::getDpNuevosIngresos($anyo, $estudio->id_nk),
            'estructuras' => $estructuras,
            'estudio_id_nk' => $estudio->id_nk,
            'globales' => $globales,
            'globales_abandono' => $globales_abandono,
            'indicadores' => $indicadores,
            'lista_planes' => $lista_planes,
            'mostrar_botones' => $mostrar_botones,
            'nueva_version' => $nueva_version,
            'nuevos_ingresos' => $nuevos_ingresos,
            'planes' => $planes,
            'preguntas' => $preguntas,
            'respuestas' => $respuestas2,
            ]
        );
    }

    /**
     * Muestra el informe de un Programa de Doctorado.
     */
    public function actionVerDoct($estudio_id, $anyo)
    {
        Url::remember();
        $estudio = Estudio::getEstudio($estudio_id);
        $language = Yii::$app->language;
        $informePublicado = InformePublicado::find()
            ->where(['estudio_id' => $estudio_id, 'anyo' => $anyo, 'language' => $language])->one();

        $nueva_version = isset($informePublicado) ? $informePublicado->version + 1 : 1;

        // El campo apartado es una cadena, por lo que se ordena alfabéticamente
        // y 10 va después de 1 en lugar de después de 9.
        // Con esta expresión convertimos a tipo numérico los primeros 3 caracteres
        // y ordenamos correctamente.  En MS SQLServer usar SUBSTRING().
        $exp = new Expression('CAST(SUBSTR(apartado, 1, 3) AS DECIMAL), apartado');

        $preguntas = InformePregunta::find()
            ->where(['anyo' => $anyo, 'tipo' => $estudio->getTipoEstudio()])
            ->orderBy($exp)
            ->all();
        if (!$preguntas) {
            throw new NotFoundHttpException(
                Yii::t(
                    'cati',
                    'No se han encontrado las preguntas del informe de evaluación para ese año.  ☹'
                )
            );
        }

        $respuestas = InformeRespuesta::find()
            ->where(['estudio_id' => $estudio_id, 'anyo' => $anyo])
            ->orderBy($exp)->all();

        $respuestas2 = [];
        foreach ($respuestas as $respuesta) {
            $respuestas2[$respuesta->informe_pregunta_id] = $respuesta;
        }

        $version_maxima = InformePublicado::MAX_VERSION_INFORME_DOCT;
        $mostrar_botones = (
            ($nueva_version <= $version_maxima) and Yii::$app->user->can('editarInforme', ['estudio' => $estudio])
        );

        $datos = Doctorado::find()
            ->where(['cod_estudio' => $estudio->id_nk])
            ->andWhere(['between', 'ano_academico', 2012, $anyo])
            ->orderBy('ano_academico')->all(); // ->asArray()->all();
        $ultimos_datos = Doctorado::find()->where(['cod_estudio' => $estudio->id_nk, 'ano_academico' => $anyo])->one();

        return $this->render(
            'doct/ver-doct',
            [
                'anyo' => intval($anyo),
                'datos' => $datos,
                'estudio' => $estudio,
                'mostrar_botones' => $mostrar_botones,
                'nueva_version' => $nueva_version,
                'preguntas' => $preguntas,
                'respuestas' => $respuestas2,
                'ultimos_datos' => $ultimos_datos,
            ]
        );
    }

    private function transponerMatriz($matriz, $clase)
    {
        $model = new $clase;
        $cod_conceptos = array_keys($matriz[0]);
        $conceptos = array_map(
            function ($c) use ($model) {
                // return Yii::t('models', $model->getAttributeLabel($c));
                return Yii::t('models', $c);
            },
            $cod_conceptos
        );
        $matriz = array_merge([$cod_conceptos], [$conceptos], $matriz);
        $matriz_transpuesta = array_map(null, ...$matriz);
        // En PHP < 5.6 el array bidimensional se puede transponer así:
        //   array_unshift($matriz, null);
        //   $matriz_transpuesta = call_user_func_array('array_map', $matriz);
        return $matriz_transpuesta;
    }

    /**
     * Muestra el Informe de la Calidad de los Estudios de Doctorado (ICED).
     */
    public function actionVerIced($anyo)
    {
        Url::remember();
        $estudio = Estudio::getUltimoEstudioByNk(Estudio::ICED_ESTUDIO_ID);
        $language = Yii::$app->language;
        $informePublicado = InformePublicado::find()
            ->where(['estudio_id' => Estudio::ICED_ESTUDIO_ID, 'anyo' => $anyo, 'language' => $language])->one();

        $nueva_version = isset($informePublicado) ? $informePublicado->version + 1 : 1;

        // El campo apartado es una cadena, por lo que se ordena alfabéticamente
        // y 10 va después de 1 en lugar de después de 9.
        // Con esta expresión convertimos a tipo numérico los primeros 3 caracteres
        // y ordenamos correctamente.  En MS SQLServer usar SUBSTRING().
        $exp = new Expression('CAST(SUBSTR(apartado, 1, 3) AS DECIMAL), apartado');

        $preguntas = InformePregunta::find()
            ->where(['anyo' => $anyo, 'tipo' => $estudio->getTipoEstudio()])
            ->orderBy($exp)
            ->all();
        if (!$preguntas) {
            throw new NotFoundHttpException(
                Yii::t(
                    'cati',
                    'No se han encontrado las preguntas del ICED para ese año.  ☹'
                )
            );
        }

        $respuestas = InformeRespuesta::find()
            ->where(['estudio_id' => $estudio->id, 'anyo' => $anyo])
            ->orderBy($exp)->all();

        $respuestas2 = [];
        foreach ($respuestas as $respuesta) {
            $respuestas2[$respuesta->informe_pregunta_id] = $respuesta;
        }

        $version_maxima = InformePublicado::MAX_VERSION_INFORME_ICED;
        $mostrar_botones = (
            ($nueva_version <= $version_maxima) and Yii::$app->user->can('editarInforme', ['estudio' => $estudio])
        );

        $datos = DoctoradoMacroarea::find()->where(['ano_academico' => $anyo])->asArray()->all();
        $cod_conceptos = array_keys($datos[0]);
        $conceptos = array_map(
            function ($c) {
                return Yii::t('models', $c);
            },
            $cod_conceptos
        );
        $datos = array_merge([$cod_conceptos], [$conceptos], $datos);
        $datos_transpuestos = array_map(null, ...$datos);
        /*
        // En PHP < 5.6 el array bidimensional se puede transponer así:
        array_unshift($datos, null);
        $datos_transpuestos = call_user_func_array('array_map', $datos);
        */

        return $this->render(
            'iced/ver-iced',
            [
                'anyo' => intval($anyo),
                'datos' => $datos_transpuestos,
                'estudio' => $estudio,
                'mostrar_botones' => $mostrar_botones,
                'nueva_version' => $nueva_version,
                'preguntas' => $preguntas,
                'respuestas' => $respuestas2,
            ]
        );
    }

    public function actionCerrar($estudio_id, $anyo)
    {
        $language = Yii::$app->language;
        $estudio = Estudio::getEstudio($estudio_id);

        $informePublicado = InformePublicado::find()
            ->where(['estudio_id' => $estudio_id, 'anyo' => $anyo, 'language' => $language])->one();
        if (!$informePublicado) {
            $informePublicado = new InformePublicado(
                [
                    'estudio_id' => $estudio_id,
                    'anyo' => intval($anyo),
                    'language' => $language,
                    'version' => 0,
                    'estudio_id_nk' => $estudio->id_nk,
                ]
            );
        }
        $version_maxima = $informePublicado->getVersionMaxima();
        if ($informePublicado->version >= $version_maxima) {
            throw new ServerErrorHttpException('Este informe ya está en su versión final. 😨');
        }
        $nuevaVersion = $informePublicado->version + 1;

        $preinforme = $this->generarPdfPreinforme($estudio_id, $anyo);
        $rutaPreinforme = $preinforme['ruta'];
        $dirInformes = Yii::getAlias('@webroot') . '/pdf/informes';
        $dirInformesAnyo = "$dirInformes/$anyo";
        $nombreInforme = "informe-{$language}-{$estudio->id_nk}-v{$nuevaVersion}.pdf";
        $rutaInforme = "{$dirInformesAnyo}/{$nombreInforme}";
        $urlInforme = Url::base(true) . "/pdf/informes/{$anyo}/{$nombreInforme}";

        // Si el estudio es de tipo doctorado, pasar a la función `cerrarDoct()`.
        if ($estudio->esDoctorado()) {
            return $this->cerrarDoct(
                $anyo,
                $estudio,
                $nuevaVersion,
                $rutaPreinforme,
                $informePublicado,
                $rutaInforme,
                $urlInforme
            );
        } elseif ($estudio->esIced()) {
            $nombreInforme = "iced-{$language}-v{$nuevaVersion}.pdf";
            $rutaInforme = "{$dirInformesAnyo}/{$nombreInforme}";
            $urlInforme = Url::base(true) . "/pdf/informes/{$anyo}/{$nombreInforme}";

            return $this->cerrarIced(
                $anyo,
                $estudio,
                $nuevaVersion,
                $rutaPreinforme,
                $informePublicado,
                $rutaInforme,
                $urlInforme
            );
        }

        // El informe se obtiene concatenando el preinforme y las encuestas.
        $dirEncuestas = Yii::getAlias('@webroot') . '/pdf/encuestas/' . $anyo;
        $pdfs = ["$rutaPreinforme"];
        $planes = Plan::find()->where(['estudio_id' => $estudio_id, 'activo' => 1])->all();
        foreach ($planes as $plan) {
            $ensenanza_file = sprintf(
                '%s/ensenanza/%d/%d_InformeEnsenanzaTitulacion.pdf',
                $dirEncuestas,
                $plan->centro->id,
                $plan->id_nk
            );
            $movilidad_file = $dirEncuestas . '/movilidad/' . $plan->centro->id . '/' . $plan->id_nk
              . '_InformeMovilidad.pdf';
            $practicas_file = sprintf(
                '%s/practicas/%d/%d_InformePracticasTitulacion.pdf',
                $dirEncuestas,
                $plan->centro->id,
                $plan->id_nk
            );
            $pas_file = sprintf(
                '%s/satisfaccionPAS/%d/%d_InformeSatisfaccionPAS.pdf',
                $dirEncuestas,
                $plan->centro->id,
                $plan->centro->id  // La satisfacción del PAS es por centro, no por plan
            );
            $pdi_file = sprintf(
                '%s/satisfaccionPDI/%d/%d_InformeSatisfaccionPDI.pdf',
                $dirEncuestas,
                $plan->centro->id,
                $plan->id_nk
            );
            $est_file = $dirEncuestas . '/satisfaccionTitulacion/' . $plan->centro->id . '/' . $plan->id_nk
                . '_InformeSatisfaccionTitulacionEstudiantes.pdf';

            foreach ([$ensenanza_file, $movilidad_file, $practicas_file, $pas_file, $pdi_file, $est_file] as $f) {
                if (file_exists($f)) {
                    $pdfs[] = "$f";
                }
            }
        }

        $output = [];
        $error = false;
        exec('pdftk ' . implode(' ', $pdfs) . " cat output $rutaInforme 2>&1", $output, $error);
        if ($error) {
            throw new ServerErrorHttpException(implode("\n", $output));
        }

        // Guardar número de versión publicada
        $informePublicado->version = $nuevaVersion;
        $informePublicado->save();

        $nombre_usuario = Yii::$app->user->identity->username;
        Yii::info(
            "{$nombre_usuario} ha cerrado la versión {$nuevaVersion} del informe del estudio {$estudio_id}",
            'coordinadores'
        );

        /*
         * Enviar mensajes de correo electrónico
         *
         * La versión 1 se envía a:
         *  - Coordinadores de los planes del estudio
         *  - Presidente de Garantía de Calidad del estudio,
         *  - Decano/Director del centro correspondiente,
         *  - Vicerrector de política académica
         *
         * La versión 2 se envía además a los expertos del rector
         */
        $coordinadores = $estudio->getCoordinadores();
        $presidentes = $estudio->getPresidentesGarantia();
        $decanos = $estudio->getDecanos();
        $destinatarios = array_merge($coordinadores, $presidentes, $decanos);
        $destinatarios[] = Yii::$app->params['mailvr'];

        if (2 == $nuevaVersion) {
            $expertos = $estudio->getExpertosRector();
            $destinatarios = array_merge($destinatarios, $expertos);
        }

        $destinatarios = array_unique($destinatarios);
        $this->enviarCorreo($destinatarios, $estudio, $anyo, $nuevaVersion, $urlInforme, $rutaInforme);

        // Redirigir al PDF
        return $this->redirect($urlInforme);
    }

    public function actionPrevisualizar($estudio_id, $anyo)
    {
        $preinforme = $this->generarPdfPreinforme($estudio_id, $anyo);
        // Redirigir al PDF
        return $this->redirect($preinforme['url']);
    }

    private function generarPdfPreinforme($estudio_id, $anyo)
    {
        $language = Yii::$app->language;
        $estudio = Estudio::getEstudio($estudio_id);

        $dirInformes = Yii::getAlias('@webroot') . '/pdf/informes';
        $dirInformesAnyo = "$dirInformes/$anyo";
        if (!is_dir($dirInformesAnyo)) {
            mkdir($dirInformesAnyo);
            copy("{$dirInformes}/index.html", "{$dirInformesAnyo}/index.html");
        }
        $nombrePreinforme = "preinforme-{$language}-{$estudio->id_nk}.pdf";
        $rutaPreinforme = "{$dirInformesAnyo}/{$nombrePreinforme}";
        $urlPreinforme = Url::base(true) . "/pdf/informes/{$anyo}/{$nombrePreinforme}";
        $rutaCookies = tempnam($dirInformesAnyo, $language);

        // Generar una cookie-jar para establecer el idioma
        $pdf = new Pdf(['cookie-jar' => $rutaCookies]);
        $pdf->addPage(Url::to(['language/set2', 'language' => $language], true));  // true: URL absoluta.
        $pdf->setOptions(
            [
                'binary' => Yii::$app->params['wkhtmltopdf'],
                // 'inputArg'
                'print-media-type',
            ]
        );
        if (!$pdf->saveAs('/dev/null')) {
            throw new ServerErrorHttpException($pdf->getError());
        }

        // Crear el manejador del PDF
        $pdf = new Pdf(
            [
                'cookie-jar' => $rutaCookies,
                'binary' => Yii::$app->params['wkhtmltopdf'],
                'print-media-type',
            ]
        );

        // Crear el PDF del preinforme
        $vista = $estudio->getMetodoVerInforme();
        $pdf->addPage(
            Url::to(
                [
                    $vista,
                    'estudio_id' => $estudio_id,
                    'anyo' => $anyo,
                ],
                true
            )
        );  // true: Absolute URL
        if (!$pdf->saveAs($rutaPreinforme)) {
            throw new ServerErrorHttpException($pdf->getError());
        }
        unlink($rutaCookies);

        return ['ruta' => $rutaPreinforme, 'url' => $urlPreinforme];
    }

    private function enviarCorreo($destinatarios, $estudio, $anyo, $nuevaVersion, $urlInforme, $rutaInforme)
    {
        if (empty($destinatarios)) {
            return;
        }

        if ($estudio->esDoctorado()) {
            $asunto = "Informe de evaluación de la calidad de $estudio->nombre";
            $plantilla = 'informe-doct-cerrado';  // @app/mail/informe-doct-cerrado.php
        } elseif ($estudio->esIced()) {
            $asunto = 'Informe de la calidad de los Estudios de Doctorado y de sus diferentes programas';
            $plantilla = 'iced-cerrado';  // @app/mail/iced-cerrado.php
        } else {
            $asunto = "Informe de evaluación v$nuevaVersion de $estudio->nombre";
            $plantilla = 'informe-cerrado';  // @app/mail/informe-cerrado.php
        }

        $mensaje = Yii::$app->mailer->compose(
            $plantilla,
            [
                'estudio' => $estudio,
                'anyo' => intval($anyo),
                'version' => $nuevaVersion,
                'url_pdf' => $urlInforme,
            ]
        )->setFrom([Yii::$app->params['adminEmail'] => 'Robot Estudios'])
            ->setTo($destinatarios)
            ->setSubject($asunto)
            // ->setTextBody($texto)
            // ->setHtmlBody('<b>HTML content</b>');
        ;
        $mensaje->attach($rutaInforme);
        $mensaje->send();
    }

    public function cerrarDoct(
        $anyo,
        $estudio,
        $nuevaVersion,
        $rutaPreinforme,
        $informePublicado,
        $rutaInforme,
        $urlInforme
    ) {
        // Concatenar las encuestas al informe
        // $dirEncuestas = Yii::getAlias('@webroot').'/pdf/encuestas/'.$anyo;
        $pdfs = ["$rutaPreinforme"];
        /*
        $planes = Plan::find()->where(['estudio_id' => $estudio_id, 'activo' => 1])->all();
        foreach ($planes as $plan) {
            $foo_file = $dirEncuestas.'/bar/'.$plan->id_nk.'_baz.pdf';

            foreach ([$foo_file] as $f) {
                if (file_exists($f)) {
                    $pdfs[] = "$f";
                }
            }
        }
        */
        $salida = [];
        $error = false;
        $ficheros = implode(' ', $pdfs);
        exec("pdftk $ficheros cat output $rutaInforme 2>&1", $salida, $error);
        if ($error) {
            throw new ServerErrorHttpException(implode("\n", $salida));
        }

        // Guardar número de versión publicada
        $informePublicado->version = $nuevaVersion;
        $informePublicado->save();

        $nombre_usuario = Yii::$app->user->identity->username;
        Yii::info(
            "{$nombre_usuario} ha cerrado la versión {$nuevaVersion} del informe del estudio {$estudio->id}",
            'coordinadores'
        );

        /*
         * Enviar mensajes de correo electrónico
         *
         * El informe se envía a:
         *  - Coordinador del programa de doctorado
         *  - Director de la Escuela de Doctorado
         *  - Presidente de la Comisión de Doctorado
         */
        $destinatarios = [
            $estudio->plans[0]->email_coordinador,
            Yii::$app->params['diredoc'],
            Yii::$app->params['presiDoct'],
        ];

        $this->enviarCorreo($destinatarios, $estudio, $anyo, $nuevaVersion, $urlInforme, $rutaInforme);

        // Redirigir al PDF
        return $this->redirect($urlInforme);
    }

    public function cerrarIced(
        $anyo,
        $estudio,
        $nuevaVersion,
        $rutaPreinforme,
        $informePublicado,
        $rutaInforme,
        $urlInforme
    ) {
        copy($rutaPreinforme, $rutaInforme);

        // Guardar número de versión publicada
        $informePublicado->version = $nuevaVersion;
        $informePublicado->save();

        /*
         * Enviar mensajes de correo electrónico
         *
         * La versión 1 se envía a:
         *  - Director de la Escuela de Doctorado
         *  - Vicerrector de política académica
         *
         * La versión 2 se envía además a:
         *  - PAS de la Escuela de Doctorado
         *  - Coordinadores de los programas de doctorado
         */
        $destinatarios = [
            Yii::$app->params['diredoc'],
            Yii::$app->params['presiDoct'],
        ];

        if (2 == $nuevaVersion) {
            $destinatarios[] = Yii::$app->params['pasedoc'];
            $coordinadores = $estudio->getTodosCoordinadoresDoctorado();
            $destinatarios = array_merge($destinatarios, $coordinadores);
        }

        $destinatarios = array_unique($destinatarios);
        $this->enviarCorreo($destinatarios, $estudio, $anyo, $nuevaVersion, $urlInforme, $rutaInforme);

        // Redirigir al PDF
        return $this->redirect($urlInforme);
    }

    public function actionEditar($estudio_id, $anyo)
    {
        $estudio = Estudio::getEstudio($estudio_id);

        $informePublicado = InformePublicado::find()
            ->where(['estudio_id' => $estudio_id])->andWhere(['anyo' => $anyo])->one();
        if (isset($informePublicado) and $informePublicado->version >= $informePublicado->getVersionMaxima()) {
            throw new ServerErrorHttpException('Este informe ya está en su versión final. 😨');
        }

        // El campo apartado es una cadena, por lo que se ordena alfabéticamente
        // y 10 va después de 1 en lugar de después de 9.
        // Con esta expresión convertimos a tipo numérico los primeros 3 caracteres
        // y ordenamos correctamente.  En MS SQLServer usar SUBSTRING().
        $exp = new Expression('CAST(SUBSTR(apartado, 1, 3) AS DECIMAL), apartado');
        $preguntas = InformePregunta::find()
            ->where(['anyo' => $anyo, 'tipo' => 'grado-master'])
            ->orderBy($exp)->all();
        if (!$preguntas) {
            throw new NotFoundHttpException(
                Yii::t('cati', 'No se han encontrado las preguntas del informe para este año.')
            );
        }

        $respuestas = InformeRespuesta::find()
            ->where(['estudio_id' => $estudio_id])->andWhere(['anyo' => $anyo])
            ->orderBy($exp)->all();

        // Grado
        $nuevos_ingresos = NuevoIngreso::find()
            ->where(['COD_ESTUDIO' => $estudio->id_nk])->andWhere(['ANO_ACADEMICO' => $anyo])->all();

        $planes = Plan::find()->where(['estudio_id' => $estudio_id, 'activo' => 1])->all();
        $planes_list = array_column($planes, 'id_nk');

        $estructuras = Profesorado::getEstructuraProfesorado($anyo, $estudio->id_nk);

        $globales = AcreditacionTitulaciones::find()
            ->where(['COD_ESTUDIO' => $estudio->id_nk])
            ->andWhere(['between', 'ANO_ACADEMICO', $anyo - 6, $anyo])
            ->orderBy('ANO_ACADEMICO')->asArray()->all();

        $indicadores = AsignaturaIndicador::find()
            ->where(['COD_ESTUDIO' => $estudio->id_nk])->andWhere(['ANO_ACADEMICO' => $anyo])->all();

        return $this->render(
            'editar',
            [
            'preguntas' => $preguntas,
            'respuestas' => $respuestas,
            'nuevos_ingresos' => $nuevos_ingresos,
            'planes' => $planes,
            'dpsCalificaciones' => AsignaturaCalificacion::getDpsCalificaciones(intval($anyo), $estudio),
            'dpEstudiosPrevios' => $estudio->esGrado() ? NuevoIngreso::getDpNuevosIngresos($anyo, $estudio->id_nk)
                                                       : EstudioPrevioMaster::getDpEstudiosPrevios($anyo, $estudio->id_nk),
            'dpMovilidades' => AcreditacionTitulaciones::getDpMovilidades($anyo, $estudio->id_nk),
            'dpNuevosIngresos' => NuevoIngreso::getDpNuevosIngresos($anyo, $estudio->id_nk),
            'estructuras' => $estructuras,
            'estudio' => $estudio,
            'estudio_id_nk' => $estudio->id_nk,
            'centros' => $estudio->getCentros(),
            'globales' => $globales,
            'indicadores' => $indicadores,
            'lista_planes' => $planes_list,
            'anyo' => intval($anyo),
            ]
        );
    }

    /**
     * Muestra el formulario de edición de los informes de doctorado.
     */
    public function actionEditarDoct($estudio_id, $anyo)
    {
        $estudio = Estudio::getEstudio($estudio_id);

        $informePublicado = InformePublicado::find()
            ->where(['estudio_id' => $estudio_id, 'anyo' => $anyo])->one();
        if (isset($informePublicado) and $informePublicado->version >= $informePublicado->getVersionMaxima()) {
            throw new ServerErrorHttpException('Este informe ya está en su versión final. 😨');
        }

        $exp = new Expression('CAST(SUBSTR(apartado, 1, 3) AS DECIMAL), apartado');
        $preguntas = InformePregunta::find()
            ->where(['anyo' => $anyo, 'tipo' => 'doctorado'])
            ->orderBy($exp)->all();
        $respuestas = InformeRespuesta::find()
            ->where(['estudio_id' => $estudio_id, 'anyo' => $anyo])
            ->orderBy($exp)->all();

        $datos = Doctorado::find()->where(['cod_estudio' => $estudio->id_nk, 'ano_academico' => $anyo])->one();
        if (!$datos) {
            $datos = [];
        }

        return $this->render(
            'editar-doct',
            [
                'anyo' => intval($anyo),
                'datos' => $datos,
                'estudio' => $estudio,
                'preguntas' => $preguntas,
                'respuestas' => $respuestas,
            ]
        );
    }


    public function actionGuardar()
    {
        $request = Yii::$app->request;
        $cookies = $request->cookies; // get the cookie collection
        $language = $cookies->getValue('language', 'es');

        $estudio_id = intval($request->post('estudio_id'));
        $estudio = Estudio::getEstudio($estudio_id);
        $tipo = $estudio->getTipoEstudio();
        $vista = $estudio->getMetodoVerInforme();

        $exp = new Expression('CAST(SUBSTR(apartado, 1, 3) AS DECIMAL), apartado');
        $preguntas = InformePregunta::find()
            ->where(['anyo' => $request->post('anyo'), 'tipo' => $tipo])
            ->orderBy($exp)->all();

        foreach ($preguntas as $pregunta) {
            $respuesta = InformeRespuesta::find()->where(
                [
                    'estudio_id' => $estudio_id,
                    'anyo' => $request->post('anyo'),
                    'informe_pregunta_id' => $pregunta->id,
                ]
            )->one();

            if (!$respuesta) {
                $respuesta = new InformeRespuesta();

                $respuesta->estudio_id = $estudio_id;
                $respuesta->anyo = $request->post('anyo');
                $respuesta->informe_pregunta_id = $pregunta->id;
                $respuesta->apartado = $pregunta->apartado;
            }

            $respuesta->language = $language;
            $respuesta->contenido = $request->post($pregunta->id);

            $respuesta->save();
        }

        $usuario = Yii::$app->user->identity;
        $nombre = $usuario->username;
        Yii::info("{$nombre} ha guardado un informe del estudio {$estudio_id}.", 'coordinadores');

        return $this->redirect(
            Url::to(
                [
                    $vista,
                    'estudio_id' => $estudio_id,
                    'anyo' => $request->post('anyo'),
                ]
            )
        );
    }

    /**
     * Genera un MarcXML para exportar los informes de un año.
     *
     * Puede generar el MarcXML de un grado/máster dado o de todos.
     */
    public function actionMarcXml($anyo, $estudio_id = null)
    {
        Yii::$app->language = 'es';
        if ($estudio_id) {
            $estudios = [Estudio::getEstudio($estudio_id)];
        } else {
            $estudios = Estudio::find()
                ->where(['anyo_academico' => $anyo])
                ->andWhere(
                    [
                        'in',
                        'tipoEstudio_id',
                        [Estudio::GRADO_TIPO_ESTUDIO_ID, Estudio::MASTER_TIPO_ESTUDIO_ID],
                    ]
                )->all();
        }
        $estudios = array_filter(
            $estudios,
            function ($estudio) use ($anyo) {
                $ip = InformePublicado::find()->where(
                    [
                        'estudio_id' => $estudio->id,
                        'anyo' => $anyo,
                        'version' => InformePublicado::MAX_VERSION_INFORME,
                    ]
                )->one();

                return null != $ip;
            }
        );

        Yii::$app->response->format = \yii\web\Response::FORMAT_RAW;
        Yii::$app->response->headers->add('Content-Type', 'text/xml');

        return $this->renderPartial(
            'marc-xmls',
            [
                'anyo' => intval($anyo),
                'estudios' => $estudios,
            ]
        );
    }

    /**
     * Lanzar la carga de los informes en Zaguán
     */
    public function actionCargarAZaguan($anyo)
    {
        $fichero = fopen(Url::to(['informe/marc-xml', 'anyo' => $anyo], true), 'rb');
        $contenido = stream_get_contents($fichero);
        fclose($fichero);

        $temp = tmpfile();
        fwrite($temp, $contenido);
        $meta_data = stream_get_meta_data($temp);
        $ruta = $meta_data['uri'];
        $cfile = new \CURLFile($ruta, 'application/xml');

        $wsUrl = 'https://desinvenio.unizar.es/batchuploader/robotupload';
        // Crear el recurso de cURL
        $curlHandle = curl_init();
        // Establecer las opciones
        curl_setopt_array(
            $curlHandle,
            [
                // TRUE para devolver el resultado de la transferencia como una cadena
                // del valor devuelto por curl_exec() en lugar de mostrarlo directamente.
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_FAILONERROR => true,
                CURLOPT_URL => $wsUrl,
                // CURLOPT_SSL_VERIFYPEER => false,
                CURLOPT_USERAGENT => 'zaguan_estudios',
                CURLOPT_POST => true,
                CURLOPT_POSTFIELDS => [
                    'file' => $cfile,
                    'mode' => '-ir',
                ],
            ]
        );
        // Enviar la petición y guardar la respuesta en la variable
        $respuesta = curl_exec($curlHandle);
        if (false === $respuesta) {
            throw new ServerErrorHttpException('Error: "' . curl_error($curlHandle) . '" - Cod: ' . curl_errno($curlHandle));
        }
        // Cerrar el recurso de curl para liberar recursos del sistema
        curl_close($curlHandle);
        fclose($temp);

        $nombre_usuario = Yii::$app->user->identity->username;
        $texto = "{$nombre_usuario} ha lanzado la carga a Zaguan de los informes de evaluación del año {$anyo}.";
        $mensaje = Yii::$app->mailer->compose()
            ->setFrom([Yii::$app->params['adminEmail'] => 'Robot Estudios'])
            ->setTo(Yii::$app->params['adminZaguan'])
            ->setSubject('Lanzada carga a Zaguan')
            ->setTextBody($texto)
            // ->setHtmlBody('<b>HTML content</b>');
        ;
        $mensaje->send();

        Yii::info($texto, 'gestion');

        return $this->render(
            '//gestion/zaguan-resultado',
            [
                'anyo' => $anyo,
                'respuesta' => $respuesta,
            ]
        );
    }
}
